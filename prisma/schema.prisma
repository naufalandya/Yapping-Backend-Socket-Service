generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model YappinLike {
  id                 Int                  @id @default(autoincrement())
  user_id            Int
  yappin_id          Int?
  users              users                @relation(fields: [user_id], references: [id])
  yappins            yappins?             @relation(fields: [yappin_id], references: [id])
  like_notifications like_notifications[]

  @@unique([user_id, yappin_id])
}

model YappinComment {
  id                    Int                     @id @default(autoincrement())
  content               String
  created_at            DateTime                @default(now())
  user_id               Int
  yappin_id             Int
  users                 users                   @relation(fields: [user_id], references: [id])
  yappin                yappins                 @relation(fields: [yappin_id], references: [id])
  comment_notifications comment_notifications[]
}

model follows {
  followerId                       Int
  followingId                      Int
  createdAt                        DateTime @default(now())
  id                               Int      @id @default(autoincrement())
  users_follows_followerIdTousers  users    @relation("follows_followerIdTousers", fields: [followerId], references: [id])
  users_follows_followingIdTousers users    @relation("follows_followingIdTousers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model list_preference {
  id   Int    @id @default(autoincrement())
  name String
}

model like_notifications {
  id             Int        @id @default(autoincrement())
  detail         String
  redirect       String?
  created_at     DateTime   @default(now())
  user_id        Int
  yappin_like_id Int
  by_id          Int
  byusers        users      @relation("by_user", fields: [by_id], references: [id])
  users          users      @relation(fields: [user_id], references: [id])
  yappin_like    YappinLike @relation(fields: [yappin_like_id], references: [id])
}

model comment_notifications {
  id                  Int           @id @default(autoincrement())
  detail              String
  redirect            String?
  created_at          DateTime      @default(now())
  user_id             Int
  yappin_comment_id   Int
  by_id               Int
  byusers             users         @relation("by_user_comment", fields: [by_id], references: [id])
  users               users         @relation(fields: [user_id], references: [id])
  yappin_comment_like YappinComment @relation(fields: [yappin_comment_id], references: [id])
}

model preference_yappin {
  id                   Int     @id @default(autoincrement())
  preference_tag_one   String?
  preference_tag_two   String?
  preference_tag_three String?
  preference_tag_four  String?
  user_id              Int     @unique
  total_engage_four    Int?
  total_engage_one     Int?
  total_engage_three   Int?
  total_engage_two     Int?
  users                users   @relation(fields: [user_id], references: [id])
}

model reminders {
  id            Int       @id @default(autoincrement())
  content       String
  is_finished   Boolean   @default(false)
  started_date  DateTime
  finished_date DateTime?
  deadline_date DateTime
  created_date  DateTime
  user_id       Int
  is_public     Boolean
  location      String
  title         String
  users         users     @relation(fields: [user_id], references: [id])
}

model tags {
  id   Int @id @default(autoincrement())
  name Int @unique
}

model users {
  id                                 Int                     @id @default(autoincrement())
  name                               String?                 @db.VarChar(100)
  username                           String                  @unique @db.VarChar(50)
  email                              String                  @unique @db.VarChar(50)
  password                           String                  @db.VarChar(120)
  country                            String?                 @db.VarChar(50)
  city                               String?                 @db.VarChar(50)
  bio                                String?                 @db.VarChar(255)
  avatar_link                        String?
  googleId                           String?
  created_at                         DateTime                @default(now())
  updated_at                         DateTime
  role                               ROLE                    @default(USER)
  UsageRecords                       UsageRecord[]
  YappinComment                      YappinComment[]
  YappinLike                         YappinLike[]
  by_notifications_comment           comment_notifications[] @relation("by_user_comment")
  comment_notifications              comment_notifications[]
  follows_follows_followerIdTousers  follows[]               @relation("follows_followerIdTousers")
  follows_follows_followingIdTousers follows[]               @relation("follows_followingIdTousers")
  by_notifications                   like_notifications[]    @relation("by_user")
  like_notifications                 like_notifications[]
  preference_yappin                  preference_yappin?
  reminders                          reminders[]
  yappins                            yappins[]
}

model UsageRecord {
  id        String   @id @default(uuid())
  userId    Int
  date      DateTime
  duration  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      users    @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

model yappin_image {
  id         Int       @id @default(autoincrement())
  image_link String
  yappin_id  Int?
  type       EXTENSION
  yappins    yappins?  @relation(fields: [yappin_id], references: [id])
}

model yappins {
  id             Int             @id @default(autoincrement())
  caption        String
  total_likes    Int?            @default(0)
  created_at     DateTime
  tag_one_id     Int?
  tag_two_id     Int?
  tag_three_id   Int?
  tag_four_id    Int?
  user_id        Int
  tag_four_name  String?
  tag_one_name   String?
  tag_three_name String?
  tag_two_name   String?
  is_public      Boolean         @default(false)
  total_comments Int?            @default(0)
  location       String?
  YappinComment  YappinComment[]
  YappinLike     YappinLike[]
  yappin_image   yappin_image[]
  users          users           @relation(fields: [user_id], references: [id])
}

model sqlx_migrations {
  version        BigInt   @id
  description    String
  installed_on   DateTime @default(now()) @db.Timestamptz(6)
  success        Boolean
  checksum       Bytes
  execution_time BigInt

  @@map("_sqlx_migrations")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model biology_facts {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  fact       String?
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model motivational_quotes {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  quotes     String?
  author     String?
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model physic_facts {
  id         BigInt   @id(map: "physic_fact_pkey") @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  fact       String?
}

enum EXTENSION {
  VIDEO
  IMAGE
}

enum ROLE {
  ADMIN
  USER
}
